/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package se.clau.ironclad.language;

import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;

import static se.clau.ironclad.language.ErlangElementTypes.*;
import static se.clau.ironclad.language.ErlangParserDefinition.*;
import static com.intellij.psi.TokenType.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>erlang.flex</tt>
 */
public class _ErlangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_SHEBANG = 2;
  public static final int IN_LIFETIME_OR_CHAR = 4;
  public static final int IN_RAW_LITERAL = 6;
  public static final int IN_RAW_LITERAL_SUFFIX = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16848 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\21\1\23\1\21\14\24\1\25\50\24\1\26\2\24\1\27\1\30\1\31\1\32"+
    "\25\24\1\33\20\21\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\21\1\24\1\56\1\57\5\21\2\24\1\60"+
    "\7\21\1\24\1\61\20\21\1\24\1\62\1\21\1\63\13\24\1\64\1\24\1\65\22\21\1\66"+
    "\5\21\1\67\11\21\1\70\1\71\1\72\1\73\1\21\1\74\2\21\1\75\3\21\1\76\2\21\1"+
    "\77\10\21\123\24\1\100\7\24\1\101\1\102\12\24\1\103\24\21\1\24\1\104\u0582"+
    "\21\1\105\u017f\21");

  /* The ZZ_CMAP_Y table has 4480 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\4\0\1\16"+
    "\1\17\1\16\2\7\1\20\3\7\1\20\71\7\1\21\1\7\1\22\1\0\1\23\1\24\2\0\16\25\1"+
    "\26\1\27\1\30\1\31\2\7\1\32\11\7\1\33\21\7\1\34\1\35\24\7\1\36\3\7\1\20\1"+
    "\37\1\36\4\7\1\0\1\40\4\25\1\41\1\42\1\0\3\7\2\43\3\0\1\25\1\44\5\7\1\45\3"+
    "\25\1\46\1\47\13\7\1\50\1\51\1\52\1\53\1\25\1\54\2\0\1\55\3\7\3\25\1\56\12"+
    "\7\1\57\1\25\1\60\1\0\1\25\1\61\3\7\1\45\1\62\1\16\2\7\1\57\1\63\1\64\1\65"+
    "\2\0\3\7\1\66\10\0\2\7\1\26\1\67\2\0\1\70\1\25\1\71\3\25\1\72\6\7\1\73\2\25"+
    "\1\74\1\7\1\75\1\25\1\36\1\7\1\76\1\77\1\100\2\7\1\101\1\102\1\103\1\51\1"+
    "\104\1\105\1\106\1\75\1\25\1\22\1\0\1\107\1\110\1\100\2\7\1\101\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\1\25\1\120\1\0\1\107\1\33\1\32\2\7\1\101\1"+
    "\121\1\103\1\41\1\122\1\123\1\0\1\75\1\25\1\0\1\37\1\107\1\77\1\100\2\7\1"+
    "\101\1\121\1\103\1\51\1\114\1\117\1\106\1\75\1\25\1\37\1\0\1\124\1\125\1\126"+
    "\1\127\1\130\1\125\1\7\1\131\1\132\1\133\1\134\1\0\1\117\1\25\2\0\1\135\1"+
    "\26\1\101\2\7\1\101\1\7\1\136\1\137\1\133\1\140\1\43\1\75\1\25\2\0\1\76\1"+
    "\26\1\101\2\7\1\101\1\141\1\103\1\137\1\133\1\140\1\142\1\75\1\25\1\143\1"+
    "\0\1\107\1\26\1\101\4\7\1\144\1\137\1\145\1\146\1\147\1\75\1\25\1\0\1\35\1"+
    "\150\1\7\1\20\1\35\2\7\1\32\1\151\1\20\1\152\1\153\1\25\1\117\1\25\1\154\1"+
    "\0\1\36\5\7\1\155\1\44\1\156\1\157\1\25\1\160\4\0\1\161\1\162\1\163\1\36\1"+
    "\164\1\165\1\155\1\166\1\167\1\170\1\25\1\171\4\0\1\123\2\0\1\160\1\25\1\160"+
    "\1\172\1\173\1\7\1\36\3\7\1\23\1\40\1\25\1\137\1\174\1\25\1\40\3\25\1\175"+
    "\1\176\7\0\5\7\1\45\1\25\1\177\1\25\1\160\1\57\1\200\1\201\1\202\1\203\1\7"+
    "\1\204\1\205\1\25\1\170\4\7\1\33\1\206\5\7\1\207\51\7\1\126\1\20\1\126\5\7"+
    "\1\126\4\7\1\126\1\20\1\126\1\7\1\20\7\7\1\126\10\7\1\210\1\0\1\40\1\160\1"+
    "\0\2\7\2\0\12\7\2\67\1\36\114\7\1\77\2\7\1\36\2\7\1\43\11\7\1\125\1\7\1\123"+
    "\1\7\1\26\1\211\1\0\2\7\1\211\1\0\2\7\1\212\1\0\1\7\1\26\1\213\1\0\6\7\1\214"+
    "\3\25\1\215\1\216\1\25\1\160\3\0\1\217\1\25\1\160\13\7\1\0\5\7\1\220\10\7"+
    "\1\67\1\0\3\7\1\20\1\25\1\221\1\25\1\221\1\117\1\25\3\7\1\67\1\23\1\0\5\7"+
    "\1\222\3\7\1\22\1\25\1\44\4\0\2\7\1\156\1\221\6\7\1\174\1\157\3\25\1\51\1"+
    "\25\1\160\1\25\1\160\1\147\1\0\1\25\1\170\10\0\1\223\5\7\1\214\1\25\1\223"+
    "\1\222\1\25\1\160\1\0\1\224\1\221\1\0\1\225\3\7\1\74\1\202\1\25\1\61\4\7\1"+
    "\57\1\25\1\221\1\0\4\7\1\214\2\25\1\0\1\25\1\226\1\25\1\61\3\7\1\67\1\7\1"+
    "\123\10\0\1\227\2\25\1\230\1\231\1\160\30\7\6\25\1\170\1\224\42\7\2\67\4\7"+
    "\2\67\1\7\1\232\3\7\1\67\6\7\1\26\1\167\1\233\1\23\1\234\1\222\1\7\1\23\1"+
    "\233\1\23\5\0\1\235\1\0\1\105\1\236\1\0\1\237\3\0\1\37\1\147\2\0\1\7\1\23"+
    "\6\0\1\25\1\175\1\240\1\25\1\236\1\0\1\241\1\35\1\151\1\67\1\24\1\101\1\7"+
    "\1\242\1\243\1\244\2\0\5\7\1\123\116\0\5\7\1\20\5\7\1\20\20\7\1\23\1\245\1"+
    "\246\1\0\4\7\1\33\1\206\7\7\1\147\1\0\1\105\2\7\1\20\1\0\10\20\4\25\1\243"+
    "\3\0\1\36\1\204\1\247\1\23\1\36\11\7\1\20\1\250\1\36\12\7\1\207\1\243\4\7"+
    "\1\67\1\36\12\7\1\20\2\0\3\7\1\43\6\0\170\7\1\67\11\0\72\7\1\67\5\0\21\7\1"+
    "\23\10\0\5\7\1\67\41\7\1\23\2\7\1\25\1\246\2\0\5\7\1\156\1\70\1\251\3\7\1"+
    "\57\12\7\1\160\3\0\1\147\1\7\1\35\14\7\1\100\3\7\1\20\1\7\7\0\1\147\1\7\1"+
    "\252\1\253\2\7\1\45\3\0\6\7\1\222\1\0\1\61\5\7\1\214\1\25\1\170\1\0\1\25\1"+
    "\160\2\25\1\61\1\254\1\25\1\61\2\7\1\57\1\170\2\7\1\156\1\25\1\221\1\0\3\7"+
    "\1\23\1\72\5\7\1\45\1\25\1\236\1\147\1\25\1\160\1\255\1\7\1\25\1\256\5\7\1"+
    "\74\1\157\1\0\1\253\1\257\1\25\1\160\2\7\1\20\1\260\6\7\1\201\1\261\1\220"+
    "\2\0\1\262\1\7\1\45\1\263\1\0\3\264\1\0\2\20\5\7\1\207\1\67\1\0\16\7\1\45"+
    "\1\265\1\25\1\160\64\7\1\222\1\0\2\7\1\20\1\266\5\7\1\222\40\0\55\7\1\67\15"+
    "\7\1\22\4\0\1\20\1\0\1\266\1\267\1\7\1\101\1\20\1\167\1\270\15\7\1\22\3\0"+
    "\1\266\20\7\1\67\1\163\32\7\1\67\2\0\10\7\1\35\6\7\5\0\1\7\1\22\2\25\2\0\2"+
    "\25\1\271\2\0\1\272\4\0\1\273\1\232\17\7\1\23\2\0\1\25\1\160\1\36\2\7\1\274"+
    "\1\36\2\7\1\43\1\275\6\7\1\57\3\7\1\20\3\35\1\276\4\0\1\7\1\141\2\7\1\20\2"+
    "\7\1\277\1\7\1\67\1\7\1\67\4\0\17\7\1\43\10\0\6\7\1\23\20\0\1\300\20\0\3\7"+
    "\1\23\6\7\1\123\1\0\1\236\3\0\4\7\2\0\3\7\1\43\4\7\1\57\1\44\3\7\1\67\4\7"+
    "\1\222\1\7\1\247\5\0\23\7\1\67\1\25\1\160\4\7\1\222\4\7\1\222\5\7\1\0\6\7"+
    "\1\222\23\0\46\7\1\20\1\0\2\7\1\67\1\0\1\7\23\0\1\67\1\101\4\7\1\33\1\301"+
    "\2\7\1\67\1\0\2\7\1\20\1\0\3\7\1\20\10\0\2\7\1\302\1\0\2\7\1\67\1\0\3\7\1"+
    "\22\10\0\7\7\1\275\10\0\1\303\1\70\1\141\1\36\2\7\1\222\1\113\4\0\3\7\1\23"+
    "\3\7\1\23\4\0\1\7\1\36\2\7\1\304\3\0\6\7\1\67\1\0\2\7\1\67\1\0\2\7\1\43\1"+
    "\0\2\7\1\22\15\0\11\7\1\123\6\0\6\7\1\43\1\0\6\7\1\43\41\0\1\225\6\7\1\25"+
    "\1\157\3\0\1\117\1\25\1\0\1\105\1\225\5\7\1\25\1\44\2\0\3\7\1\123\1\25\1\160"+
    "\1\225\3\7\1\156\1\25\1\137\1\25\2\0\4\7\1\305\1\0\1\225\5\7\1\45\1\25\1\306"+
    "\1\307\1\25\1\310\4\0\2\7\1\32\2\7\1\214\1\25\1\176\10\0\1\20\1\311\1\7\1"+
    "\33\1\7\1\123\5\7\1\156\1\25\1\44\1\25\1\160\1\135\1\77\1\100\2\7\1\101\1"+
    "\121\1\103\1\51\1\114\1\134\1\243\1\75\2\175\21\0\6\7\1\174\1\25\1\177\1\43"+
    "\1\25\1\160\4\0\6\7\2\25\1\312\1\0\1\25\1\160\24\0\5\7\1\156\1\170\1\25\1"+
    "\236\2\0\1\257\4\0\6\7\2\25\1\313\1\0\1\25\1\160\4\0\5\7\1\45\1\25\1\0\1\25"+
    "\1\160\6\0\3\7\1\314\1\25\1\221\1\25\1\160\54\0\10\7\1\25\1\160\1\0\1\147"+
    "\70\0\7\7\1\123\40\0\1\7\1\101\3\7\1\156\1\157\1\25\1\123\1\0\1\25\1\160\2"+
    "\0\1\35\3\7\1\315\2\25\1\40\1\157\51\0\63\7\1\22\14\0\15\7\1\20\2\0\30\7\1"+
    "\222\27\0\5\7\1\20\72\0\10\7\1\20\67\0\7\7\1\123\3\7\1\20\1\25\1\160\14\0"+
    "\3\7\1\67\1\175\1\0\6\7\1\157\1\0\1\222\1\0\1\25\1\160\1\266\2\7\1\243\2\7"+
    "\56\0\10\7\1\23\1\0\1\74\4\25\1\157\1\0\1\105\1\225\1\7\10\0\1\123\3\0\75"+
    "\7\1\23\2\0\36\7\1\43\41\0\1\22\77\0\15\7\1\43\1\7\1\23\1\7\1\123\1\7\1\316"+
    "\130\0\1\272\1\317\1\44\1\224\1\320\1\221\3\0\1\321\22\0\1\307\67\0\12\7\1"+
    "\26\10\7\1\26\1\322\1\323\1\7\1\324\1\141\7\7\1\33\1\325\2\26\3\7\1\326\1"+
    "\167\1\35\1\101\51\7\1\67\3\7\1\101\2\7\1\207\3\7\1\207\2\7\1\26\3\7\1\26"+
    "\2\7\1\20\3\7\1\20\3\7\1\101\3\7\1\101\2\7\1\207\1\327\14\25\1\157\1\224\5"+
    "\25\1\175\1\300\1\0\1\237\2\0\1\224\1\40\1\25\52\0\1\157\2\25\1\330\1\331"+
    "\1\44\72\0\30\7\1\23\1\0\1\157\5\0\10\7\1\214\1\44\1\25\1\160\24\0\1\141\3"+
    "\7\1\161\1\36\1\207\1\332\1\241\1\333\1\161\1\232\1\161\2\207\1\116\1\7\1"+
    "\32\1\7\1\222\1\334\1\32\1\7\1\222\50\0\32\7\1\20\5\0\106\7\1\23\1\0\33\7"+
    "\1\67\120\7\1\22\53\0\3\7\1\67\134\0\36\25\2\0");

  /* The ZZ_CMAP_A table has 1768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\2\62\1\1\2\0\1\2\1\26\1\25\1\4\1\0\1\61\2\0\1\31\1\32\1\45\1"+
    "\41\1\35\1\10\1\36\1\40\1\13\1\21\6\17\2\12\1\33\1\34\1\44\1\37\1\43\1\46"+
    "\1\0\4\15\1\7\1\15\14\5\1\27\1\22\1\30\1\0\1\11\1\0\1\56\1\20\1\15\1\47\1"+
    "\52\1\15\2\5\1\50\2\5\1\55\1\53\1\57\1\16\2\5\1\3\1\54\1\60\1\5\1\51\1\5\1"+
    "\14\2\5\1\23\1\42\1\24\7\0\1\62\4\0\1\5\12\0\1\5\1\0\1\6\7\5\1\0\2\5\4\0\4"+
    "\5\6\0\5\5\7\0\1\5\1\0\1\5\1\0\10\6\5\5\1\0\2\5\3\0\3\5\1\0\1\5\6\0\1\5\1"+
    "\6\3\5\1\0\1\5\1\0\4\5\1\0\13\5\1\0\3\5\1\0\5\6\2\0\6\5\1\0\7\5\1\0\1\5\7"+
    "\0\15\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6\3\5\5\0\3\6\5\0\3\5\7\6\4\0\2\5\1"+
    "\6\13\5\1\0\1\5\7\6\2\0\6\6\2\5\2\6\1\0\4\6\2\5\2\6\3\5\2\0\2\5\1\6\6\5\3"+
    "\6\2\0\11\5\3\6\1\5\6\0\2\6\6\5\4\6\2\5\2\0\2\6\1\5\11\6\1\5\3\6\1\5\5\6\2"+
    "\0\1\5\3\6\4\0\6\5\6\0\6\6\1\0\11\6\6\5\3\6\1\5\2\6\1\5\7\6\2\5\2\6\2\0\2"+
    "\6\1\5\3\6\1\0\10\5\2\0\2\5\2\0\6\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5\3"+
    "\6\2\0\3\6\1\5\10\0\1\6\4\0\2\5\1\0\1\5\1\0\3\6\1\0\6\5\4\0\2\5\1\0\2\5\1"+
    "\0\2\5\1\0\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\3\0\1\6\7\0\4\5\1\0\1\5\7\0"+
    "\4\6\3\5\1\6\2\0\1\5\1\0\2\5\1\0\3\5\2\6\1\0\3\6\2\0\1\5\11\0\1\6\1\5\1\0"+
    "\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\2\5\4\0\5\6\3\0\3"+
    "\6\1\0\4\6\2\0\1\5\6\0\5\6\1\0\5\5\3\0\1\5\7\6\1\0\2\6\5\0\2\6\1\0\4\5\1\0"+
    "\3\5\6\0\1\5\2\0\2\5\5\0\3\5\2\0\1\5\3\6\1\0\4\6\1\5\5\0\3\5\1\6\7\0\1\5\2"+
    "\0\2\6\1\0\7\5\1\0\1\5\4\0\1\6\4\0\6\6\1\0\1\6\3\0\2\6\4\0\1\5\1\6\1\5\5\6"+
    "\7\5\10\6\1\0\2\6\7\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\3\5"+
    "\1\0\1\5\1\0\1\5\2\0\2\5\1\0\3\5\2\6\1\0\2\6\1\5\2\0\5\5\1\0\1\5\1\0\6\6\2"+
    "\0\2\6\2\0\4\5\5\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6\5\5\10\6\11\0\1\6\1\0\7\6\1"+
    "\5\2\6\4\5\3\6\1\5\3\6\2\5\7\6\3\5\4\6\5\5\14\6\1\5\1\6\5\0\1\5\2\0\3\5\1"+
    "\0\7\5\2\0\3\6\2\5\3\6\3\0\2\5\2\6\4\0\1\5\1\0\2\6\4\0\4\5\10\6\3\0\1\5\4"+
    "\0\1\5\1\6\5\0\3\6\2\0\1\5\1\6\1\5\5\0\4\6\4\0\4\5\4\0\5\6\3\5\3\0\10\6\5"+
    "\5\2\6\3\0\3\5\3\6\1\0\5\6\4\5\1\6\4\5\3\6\2\5\2\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\2\0\3\5\1\0\6\5\2\0\2\5\2\62\6\0\1\6\13\0\1\6\4\0\1\6\3\0\3\6\2\0\1\5"+
    "\4\0\3\5\2\0\4\5\5\0\5\5\4\0\1\5\4\0\4\5\3\6\2\5\5\0\5\5\3\0\2\6\2\0\3\5\6"+
    "\6\1\0\3\5\1\6\3\5\1\6\4\5\1\6\4\5\3\0\1\5\1\0\1\5\2\0\5\5\1\6\2\5\2\6\5\5"+
    "\1\0\4\5\2\6\4\0\1\5\3\6\2\5\1\6\5\5\2\6\3\0\3\5\4\0\3\5\2\6\2\0\6\5\1\0\3"+
    "\6\1\0\2\6\5\0\5\5\5\0\1\5\1\6\3\5\1\0\2\5\1\0\2\5\3\0\2\6\10\0\3\6\1\0\1"+
    "\5\1\0\1\5\3\0\4\5\4\0\1\6\6\0\2\5\2\0\3\5\3\0\3\5\1\0\2\5\1\0\1\5\5\0\1\6"+
    "\2\0\1\5\3\0\1\5\2\0\4\5\1\0\2\5\2\0\1\5\3\6\1\0\2\6\1\0\5\5\2\6\1\0\3\5\1"+
    "\6\2\0\1\5\1\0\1\6\4\5\5\0\3\6\3\0\2\6\1\5\1\0\1\5\3\0\1\5\1\0\4\5\1\0\1\5"+
    "\4\6\2\5\1\0\1\5\1\6\3\0\1\5\3\0\2\5\3\0\3\6\2\0\6\6\2\5\3\0\2\6\1\0\2\6\3"+
    "\0\6\6\2\0\3\6\2\0\4\6\4\0\1\5\2\0\2\5\2\0\4\5\1\0\4\5\1\0\1\5\1\0\6\5\2\0"+
    "\5\5\1\0\4\5\1\0\4\5\2\0\3\6\2\0\7\6\1\0\2\6\1\0\2\6\1\0\1\5\1\0\1\5\5\0\1"+
    "\5\1\0\1\5\1\0\3\5\1\0\3\5\1\0\3\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\3\1\5\2\6"+
    "\3\3\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\3\3\1\33\1\34"+
    "\1\35\1\0\1\3\1\0\1\36\7\6\1\3\1\37"+
    "\5\3\2\11\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\3\3\1\33\1\47\1\50\1\51\2\0\2\6"+
    "\1\52\2\3\1\53\1\54\1\55\2\3\2\11\1\56"+
    "\1\57\1\60\1\47\1\61\1\6\1\3\1\62\1\63"+
    "\1\64\1\0\3\3\1\65\1\3\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\231\0\231"+
    "\0\u02ca\0\231\0\231\0\231\0\231\0\231\0\u02fd\0\231"+
    "\0\231\0\231\0\u0330\0\u0363\0\231\0\u0396\0\231\0\u03c9"+
    "\0\231\0\231\0\u03fc\0\u042f\0\u0462\0\u0495\0\231\0\231"+
    "\0\u04c8\0\u04fb\0\u052e\0\231\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792"+
    "\0\u07c5\0\u07f8\0\u082b\0\u085e\0\231\0\231\0\231\0\231"+
    "\0\231\0\231\0\231\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d"+
    "\0\u0165\0\231\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0165\0\u0a5c"+
    "\0\u0a8f\0\u0165\0\u0165\0\u0165\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b"+
    "\0\u0165\0\u0b8e\0\u0165\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0165"+
    "\0\u0165\0\u0165\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0165\0\u0d59"+
    "\0\u0165";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\4\1\10\1\11"+
    "\1\10\1\12\1\13\1\14\1\10\1\15\1\12\1\16"+
    "\1\12\1\4\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\6\10"+
    "\1\44\1\45\1\10\1\46\1\4\1\47\1\50\61\47"+
    "\63\4\64\0\2\5\63\0\1\10\1\51\3\10\1\0"+
    "\11\10\25\0\3\10\1\52\6\10\30\0\1\53\37\0"+
    "\1\10\1\0\3\10\1\0\11\10\25\0\12\10\45\0"+
    "\1\54\22\0\1\55\1\0\1\56\1\0\1\57\1\0"+
    "\1\60\2\12\3\56\1\12\1\56\1\12\25\0\3\56"+
    "\1\57\6\56\5\0\1\55\1\0\1\56\1\0\1\57"+
    "\1\0\1\60\2\12\1\61\1\56\1\62\1\12\1\63"+
    "\1\12\25\0\3\56\1\57\6\56\5\0\1\10\1\0"+
    "\3\10\1\0\5\10\1\64\3\10\25\0\12\10\5\0"+
    "\1\65\1\0\3\10\1\0\11\10\25\0\12\10\5\0"+
    "\1\10\1\0\3\10\1\0\3\10\1\66\1\10\1\67"+
    "\3\10\25\0\5\10\1\70\1\10\1\71\1\72\1\10"+
    "\2\0\22\21\1\73\2\21\1\74\35\21\33\0\1\75"+
    "\66\0\1\76\3\0\1\77\56\0\1\100\65\0\1\101"+
    "\30\0\1\102\26\0\1\103\26\0\1\10\1\0\3\10"+
    "\1\0\11\10\25\0\1\10\1\104\10\10\5\0\1\10"+
    "\1\0\3\10\1\0\11\10\25\0\10\10\1\105\1\10"+
    "\5\0\1\10\1\0\3\10\1\0\5\10\1\106\3\10"+
    "\25\0\12\10\2\0\1\107\1\0\57\107\1\110\4\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\1\10\2\0"+
    "\3\10\1\0\1\10\26\0\12\10\5\0\1\10\1\0"+
    "\3\10\1\0\11\10\25\0\4\10\1\111\5\10\2\0"+
    "\27\112\1\0\33\112\3\0\1\56\1\113\3\56\1\0"+
    "\11\56\25\0\12\56\5\0\1\56\1\0\3\56\1\0"+
    "\11\56\25\0\12\56\5\0\1\56\1\0\3\56\1\114"+
    "\3\115\3\56\1\115\1\56\1\115\17\0\1\114\5\0"+
    "\12\56\5\0\1\55\1\0\2\56\1\57\1\0\3\60"+
    "\3\56\1\60\1\56\1\60\25\0\3\56\1\57\6\56"+
    "\5\0\1\55\1\0\2\56\1\116\1\0\3\61\1\56"+
    "\1\61\1\56\3\61\25\0\1\61\2\56\1\116\3\56"+
    "\1\61\2\56\5\0\1\55\1\0\2\56\1\57\1\0"+
    "\1\62\1\56\1\62\3\56\1\62\1\56\1\62\25\0"+
    "\3\56\1\57\6\56\5\0\1\55\1\0\2\56\1\57"+
    "\1\0\1\63\1\56\1\63\5\56\1\63\25\0\3\56"+
    "\1\57\6\56\5\0\1\117\1\0\3\10\1\0\11\10"+
    "\25\0\12\10\5\0\1\10\1\0\3\10\1\0\11\10"+
    "\25\0\3\10\1\120\6\10\5\0\1\10\1\0\3\10"+
    "\1\0\5\10\1\121\3\10\25\0\12\10\5\0\1\122"+
    "\1\0\3\10\1\0\11\10\25\0\12\10\5\0\1\123"+
    "\1\0\3\10\1\0\11\10\25\0\6\10\1\124\3\10"+
    "\5\0\1\10\1\0\3\10\1\0\11\10\25\0\10\10"+
    "\1\125\1\10\5\0\1\10\1\0\3\10\1\0\5\10"+
    "\1\126\3\10\25\0\12\10\2\0\63\21\3\0\1\127"+
    "\1\0\1\130\1\0\1\130\1\0\1\130\2\0\3\130"+
    "\1\0\1\130\26\0\12\130\5\0\1\10\1\0\3\10"+
    "\1\0\11\10\25\0\2\10\1\131\7\10\5\0\1\10"+
    "\1\0\3\10\1\0\11\10\25\0\1\132\11\10\5\0"+
    "\1\10\1\0\3\10\1\0\11\10\25\0\11\10\1\133"+
    "\2\0\1\107\1\0\60\107\1\0\1\134\1\0\57\134"+
    "\1\135\4\0\1\56\1\0\1\56\1\0\1\56\1\0"+
    "\1\56\2\0\3\56\1\0\1\56\26\0\12\56\13\0"+
    "\3\136\3\0\1\136\1\0\1\136\44\0\1\55\1\0"+
    "\3\56\1\0\3\115\3\56\1\115\1\56\1\115\25\0"+
    "\12\56\5\0\1\55\1\0\2\56\1\116\1\114\3\61"+
    "\1\56\1\61\1\56\3\61\17\0\1\114\5\0\1\61"+
    "\2\56\1\116\3\56\1\61\2\56\5\0\1\10\1\0"+
    "\3\10\1\0\11\10\25\0\6\10\1\137\3\10\5\0"+
    "\1\140\1\0\3\10\1\0\11\10\25\0\12\10\5\0"+
    "\1\10\1\0\3\10\1\0\11\10\25\0\1\141\11\10"+
    "\5\0\1\10\1\0\3\10\1\0\11\10\25\0\11\10"+
    "\1\142\5\0\1\130\1\143\3\130\1\0\11\130\25\0"+
    "\12\130\5\0\1\130\1\0\3\130\1\0\11\130\25\0"+
    "\12\130\5\0\1\10\1\0\3\10\1\0\11\10\25\0"+
    "\7\10\1\144\2\10\2\0\1\134\1\0\60\134\1\0"+
    "\1\135\1\0\60\135\4\0\1\55\1\0\1\56\1\0"+
    "\1\56\1\0\1\115\2\136\3\56\1\136\1\56\1\136"+
    "\25\0\12\56\5\0\1\10\1\0\3\10\1\0\11\10"+
    "\25\0\5\10\1\145\4\10\5\0\1\130\1\0\1\130"+
    "\1\0\1\130\1\0\1\130\2\0\3\130\1\0\1\130"+
    "\26\0\12\130\5\0\1\10\1\0\3\10\1\0\11\10"+
    "\25\0\6\10\1\146\3\10\5\0\1\10\1\0\3\10"+
    "\1\0\11\10\25\0\3\10\1\147\6\10\5\0\1\10"+
    "\1\0\3\10\1\0\11\10\25\0\5\10\1\150\4\10"+
    "\5\0\1\10\1\0\3\10\1\0\5\10\1\151\3\10"+
    "\25\0\12\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3468];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\12\1\2\11\1\1\5\11\1\1\3\11"+
    "\2\1\1\11\1\1\1\11\1\1\2\11\4\1\2\11"+
    "\1\0\1\1\1\0\1\11\20\1\7\11\6\1\1\11"+
    "\2\0\26\1\1\0\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ErlangLexer() {
    this((java.io.Reader)null);
  }
  /**
    * '#+' stride demarking start/end of raw string/byte literal
    */
  //private int zzShaStride = -1;

  /**
    * Dedicated storage for starting position of some previously successful
    * match
    */
  private int zzPostponedMarkedPos = -1;

  /**
    * Dedicated nested-comment level counter
    */
  private int zzNestedCommentLevel = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ErlangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case IN_SHEBANG: {
              yybegin(YYINITIAL); return SHEBANG_LINE;
            }  // fall though
            case 106: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 55: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 56: break;
          case 3: 
            { return IDENTIFIER;
            } 
            // fall through
          case 57: break;
          case 4: 
            { return HASH_SYMBOL;
            } 
            // fall through
          case 58: break;
          case 5: 
            { return MINUS;
            } 
            // fall through
          case 59: break;
          case 6: 
            { return INTEGER_LITERAL;
            } 
            // fall through
          case 60: break;
          case 7: 
            { return L_CURLY;
            } 
            // fall through
          case 61: break;
          case 8: 
            { return R_CURLY;
            } 
            // fall through
          case 62: break;
          case 9: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 63: break;
          case 10: 
            { return BANG;
            } 
            // fall through
          case 64: break;
          case 11: 
            { return L_SQUARE;
            } 
            // fall through
          case 65: break;
          case 12: 
            { return R_SQUARE;
            } 
            // fall through
          case 66: break;
          case 13: 
            { return L_PAREN;
            } 
            // fall through
          case 67: break;
          case 14: 
            { return R_PAREN;
            } 
            // fall through
          case 68: break;
          case 15: 
            { return COLON;
            } 
            // fall through
          case 69: break;
          case 16: 
            { return SEMICOLON;
            } 
            // fall through
          case 70: break;
          case 17: 
            { return COMMA;
            } 
            // fall through
          case 71: break;
          case 18: 
            { return DOT;
            } 
            // fall through
          case 72: break;
          case 19: 
            { return EQ;
            } 
            // fall through
          case 73: break;
          case 20: 
            { return FLOAT_DIV;
            } 
            // fall through
          case 74: break;
          case 21: 
            { return PLUS;
            } 
            // fall through
          case 75: break;
          case 22: 
            { return VERTICAL_BAR;
            } 
            // fall through
          case 76: break;
          case 23: 
            { return GT;
            } 
            // fall through
          case 77: break;
          case 24: 
            { return LT;
            } 
            // fall through
          case 78: break;
          case 25: 
            { return MULTIPLY;
            } 
            // fall through
          case 79: break;
          case 26: 
            { return QUESTION;
            } 
            // fall through
          case 80: break;
          case 27: 
            { return COMMENT;
            } 
            // fall through
          case 81: break;
          case 28: 
            { 
            } 
            // fall through
          case 82: break;
          case 29: 
            { yypushback(1); yybegin(YYINITIAL); return SHEBANG_LINE;
            } 
            // fall through
          case 83: break;
          case 30: 
            { return R_ARROW;
            } 
            // fall through
          case 84: break;
          case 31: 
            { return OR;
            } 
            // fall through
          case 85: break;
          case 32: 
            { return COLON_COLON;
            } 
            // fall through
          case 86: break;
          case 33: 
            { return EQEQ;
            } 
            // fall through
          case 87: break;
          case 34: 
            { return R_DOUBLE_ARROW;
            } 
            // fall through
          case 88: break;
          case 35: 
            { return NEQ;
            } 
            // fall through
          case 89: break;
          case 36: 
            { return DOUBLE_BAR;
            } 
            // fall through
          case 90: break;
          case 37: 
            { return L_ARROW;
            } 
            // fall through
          case 91: break;
          case 38: 
            { return L_DOUBLE_ARROW;
            } 
            // fall through
          case 92: break;
          case 39: 
            { return FUNCTION_DOC_COMMENT;
            } 
            // fall through
          case 93: break;
          case 40: 
            { return REMAINDER;
            } 
            // fall through
          case 94: break;
          case 41: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { if (getTokenStart() == 0) yybegin(IN_SHEBANG); else return HASH_SYMBOL;
            } 
            // fall through
          case 95: break;
          case 42: 
            { return XOR;
            } 
            // fall through
          case 96: break;
          case 43: 
            { return BINARY_OR;
            } 
            // fall through
          case 97: break;
          case 44: 
            { return BINARY_SHIFT_R;
            } 
            // fall through
          case 98: break;
          case 45: 
            { return BINARY_SHIFT_L;
            } 
            // fall through
          case 99: break;
          case 46: 
            { return INTEGER_DIV;
            } 
            // fall through
          case 100: break;
          case 47: 
            { return AND;
            } 
            // fall through
          case 101: break;
          case 48: 
            { return NOT;
            } 
            // fall through
          case 102: break;
          case 49: 
            { return MODULE_DOC_COMMENT;
            } 
            // fall through
          case 103: break;
          case 50: 
            { return BINARY_XOR;
            } 
            // fall through
          case 104: break;
          case 51: 
            { return BINARY_AND;
            } 
            // fall through
          case 105: break;
          case 52: 
            { return BINARY_NOT;
            } 
            // fall through
          case 106: break;
          case 53: 
            { return ORELSE;
            } 
            // fall through
          case 107: break;
          case 54: 
            { return ANDALSO;
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
